{
	"info": {
		"_postman_id": "792ff0d3-bcf4-4cf8-bf8d-9111dd501bb4",
		"name": "Postman_HT_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HT2_postman",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Response is contain true string\", function () {pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"});\r",
									"\r",
									"console.log(pm.response.text());\r",
									"    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var nameresponse = jsonData.name;\r",
									"console.log(\"MYNAME =\", nameresponse);\r",
									"pm.test(\"Name in response equal name from request\", function () {\r",
									"    pm.expect(nameresponse).to.be.eql(\"Leonid\");\r",
									"});\r",
									"\r",
									"var ageresponse = jsonData.age;\r",
									"console.log(\"MYAGE =\", ageresponse);\r",
									"pm.test(\"Age in response equal age from request\", function () {\r",
									"    pm.expect(ageresponse).to.be.eql(\"28\");\r",
									"});\r",
									"\r",
									"var salaryresponse = jsonData.salary;\r",
									"console.log(\"MYSALARY =\", salaryresponse);\r",
									"pm.test(\"Salary in response equal salary from request\", function () {\r",
									"    pm.expect(salaryresponse).to.be.eql(800);\r",
									"});\r",
									"\r",
									"var requestBody = request.data;\r",
									"console.log(requestBody);\r",
									"\r",
									"var namerequest = requestBody.name;\r",
									"\r",
									" pm.test(\"Name in response equal name from request number 2 \", function () {\r",
									"     pm.expect(nameresponse).to.be.eql(namerequest);\r",
									" });\r",
									" var agerequest = requestBody.age;\r",
									" pm.test(\"Age in response equal age from request number 2\", function () {\r",
									"     pm.expect(ageresponse).to.be.eql(agerequest);\r",
									" });\r",
									" var salaryrequest = +requestBody.salary;\r",
									" pm.test(\"Salary in response equal salary from request number 2\", function () {\r",
									"     pm.expect(salaryresponse).to.be.eql(salaryrequest);\r",
									" });\r",
									"console.log(\"FAMILY_FROM_RESPONSE =\", jsonData.family);\r",
									"var u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
									"console.log(u_salary_1_5_year);\r",
									"pm.test(\"Salary 1_year from resp equal salary from response*4\", function  () {\r",
									"    pm.expect(u_salary_1_5_year).to.be.eql(salaryrequest*4);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Leonid",
									"type": "text"
								},
								{
									"key": "age",
									"value": "28",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "800",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"var request = pm.request.url.query.toJSON();\r",
									"\r",
									"pm.test(\"name response equal name request\", function () {\r",
									"    pm.expect(response.name).to.be.eql(request[0].value);\r",
									"});\r",
									"var agerequest = +request[1].value;\r",
									"var ageresponse = response.age;\r",
									"console.log(\"ageresp =\" + \" \" + ageresponse + \" \" + typeof(ageresponse));\r",
									"console.log(\"agereq =\" + \" \" + agerequest + \" \" + typeof(agerequest));\r",
									"pm.test(\"age response equal age request\", function () {\r",
									"    pm.expect(ageresponse).to.be.eql(agerequest);\r",
									"});\r",
									"console.log(\"salary from request =\" + \" \"+ request[2].value);\r",
									"console.log(\"salaryfrom response =\" + \" \" + response.salary);\r",
									"console.log(\"pozition salary number zero from response =\" + \" \" + response.salary[0]);\r",
									"console.log(\"pozition salary number one from response =\" + \" \" +  response.salary[1]);\r",
									"console.log(\"pozition salary number two from response =\" + \" \" + response.salary[2]);\r",
									"pm.test(\"number 0 from response equal salary from request\", function () {\r",
									"    pm.expect(response.salary[0]).to.be.eql(+request[2].value);\r",
									"});\r",
									"pm.test(\"number 1 from response equal salary from request*2\", function () {\r",
									"    pm.expect(+response.salary[1]).to.be.eql(request[2].value*2);\r",
									"});\r",
									"pm.test(\"number 2 from response equal salary from request*3\", function () {\r",
									"    pm.expect(+response.salary[2]).to.be.eql(request[2].value*3);\r",
									"});\r",
									"\r",
									"var nameresp = response.name;\r",
									"console.log(nameresp);\r",
									"pm.environment.set(\"name\", nameresp);\r",
									"\r",
									"pm.environment.set(\"age\", ageresponse);\r",
									"\r",
									"var salaryresp = response.salary[0];\r",
									"console.log(salaryresp);\r",
									"pm.environment.set(\"salary\", salaryresp);\r",
									"\r",
									"for (var i = 0; i <response.salary.length; i = i +1) {\r",
									"    console.log(response.salary[i]);\r",
									"    };\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Leonid&age=28&salary=800",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Leonid"
								},
								{
									"key": "age",
									"value": "28"
								},
								{
									"key": "salary",
									"value": "800"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var response = pm.response.json();\r",
									"\r",
									"var request = pm.request.url.query.toObject();\r",
									"\r",
									"pm.test(\"name from response equal from request\", function () {\r",
									"    pm.expect(response.name).to.be.eql(request.name);\r",
									"});\r",
									"pm.test(\"age from response equal age from request\", function () {\r",
									"    pm.expect(response.age).to.be.eql(request.age);\r",
									"});\r",
									"pm.test(\"salary from response equal salary from request\", function () {\r",
									"    pm.expect(response.salary).to.be.eql(+request.salary);\r",
									"});\r",
									"var family = response.family;\r",
									"console.log(\"FAMILY =\",family);\r",
									"pm.test(\"property dog have propety name\", function () {\r",
									"    pm.expect(family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"pm.test(\"property dog have property age\", function () {\r",
									"    pm.expect(family.pets.dog).to.have.property(\"age\");\r",
									"});\r",
									"pm.test(\"property name have value Luky\", function () {\r",
									"    pm.expect(family.pets.dog.name).to.contain(\"Luky\");\r",
									"});\r",
									"pm.test(\"property age have value 4\", function () {\r",
									"    pm.expect(family.pets.dog.age).to.be.eql(4);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var response = pm.response.json();\r",
									"\r",
									"var request = request.data;\r",
									"console.log(request);\r",
									"\r",
									"pm.test(\"response have property start_qa_salary\", function () {\r",
									"    pm.expect(response).to.be.property(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"pm.test(\"response have property qa_salary_after_6_months\", function () {\r",
									"    pm.expect(response).to.be.property(\"qa_salary_after_6_months\");\r",
									"});\r",
									"pm.test(\"response have property qa_salary_after_12_months\", function () {\r",
									"    pm.expect(response).to.be.property(\"qa_salary_after_12_months\");\r",
									"});\r",
									"pm.test(\"response have property qa_salary_after_1,5_year\", function () {\r",
									"    pm.expect(response).to.be.property(\"qa_salary_after_1.5_year\");\r",
									"});\r",
									"pm.test(\"response have property qa_salary_after_3,5_years\", function () {\r",
									"    pm.expect(response).to.be.property(\"qa_salary_after_3.5_years\");\r",
									"});\r",
									"pm.test(\"response have property person\", function () {\r",
									"    pm.expect(response).to.be.property(\"person\");\r",
									"});\r",
									"pm.test(\"start_qa_salary from response equal salary from request\", function () {\r",
									"    pm.expect(response.start_qa_salary).to.be.eql(+request.salary);\r",
									"});\r",
									"pm.test(\"qa_salary_after_6_months from response equal salary from request multiply to 2\", function () {\r",
									"    pm.expect(response.qa_salary_after_6_months).to.be.equal(+request.salary*2);\r",
									"});\r",
									"pm.test(\"qa_salary_after_12_months from response eql salary from request multiply to 2,7\", function () {\r",
									"    pm.expect(response.qa_salary_after_12_months).to.be.eql(+request.salary*2.7);\r",
									"});\r",
									"//var salary_after_1_5_year = response.qa_salary_after_1.5_year;\r",
									"pm.test(\"qa_salary_after_1,5_year from response eql salary from request multiply to 3.3\", function () {\r",
									"    pm.expect(response[\"qa_salary_after_1.5_year\"]).to.be.eql(+request.salary*3.3);\r",
									"});\r",
									"pm.test(\"qa_salary_after_3.5_years from response eql salary from request multiply to 3.8\", function () {\r",
									"    pm.expect(response[\"qa_salary_after_3.5_years\"]).to.be.eql(+request.salary*3.8);\r",
									"});\r",
									"pm.test(\"first element from property u_name eql salary from request\", function () {\r",
									"    pm.expect(response.person.u_name[1]).to.be.eql(+request.salary);\r",
									"});\r",
									"pm.test(\"u_age from response equal age from request\", function () {\r",
									"    pm.expect(response.person.u_age).to.be.eql(+request.age);\r",
									"});\r",
									"pm.test(\"u_salary_5_years from response equal salary from request multiply 4.2\", function () {\r",
									"    pm.expect(response.person.u_salary_5_years).to.be.eql(request.salary*4.2);\r",
									"});\r",
									"var person = response.person;\r",
									"for (var prop in person) {\r",
									"  console.log(prop + \"=\" + person[prop]);\r",
									"};\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}